
import pandas as pd
import json
import ast
import numpy as np

def safe_eval(value):
    """
    G√®re les cas o√π actesSousTraitance est une string JSON, None, ou NaN.
    """
    if isinstance(value, str):
        try:
            return ast.literal_eval(value)
        except (ValueError, SyntaxError):
            return []
    elif value is np.nan or value is None:
        return []
    elif isinstance(value, list):
        return value
    else:
        return []

def test_extract_actes_sous_traitance_pandas(json_path):
    print(f"üì• Lecture du fichier JSON : {json_path}")

    # Charger le JSON
    with open(json_path, "r", encoding="utf-8") as f:
        raw = json.load(f)

    if isinstance(raw, dict) and "marches" in raw:
        raw = raw["marches"]
    elif not isinstance(raw, list):
        print("‚ùå Format de fichier inattendu.")
        return

    print(f"üîç {len(raw)} march√©s charg√©s.")

    # S√©lectionner ceux qui contiennent des actes non vides
    with_actes = [
        marche for marche in raw
        if isinstance(marche.get("actesSousTraitance"), (list, str)) and marche["actesSousTraitance"]
    ]
    print(f"üîé Nombre de march√©s avec actesSousTraitance non vides : {len(with_actes)}")

    if not with_actes:
        print("‚ùå Aucun march√© avec actesSousTraitance trouv√©.")
        return

    # Ajouter un champ uid
    for marche in with_actes:
        marche["uid"] = marche.get("id")

    # Cr√©ation du DataFrame
    df = pd.DataFrame([
        {
            "uid": marche["uid"],
            "actesSousTraitance": marche["actesSousTraitance"]
        }
        for marche in with_actes
    ])

    # üí° Parser les strings JSON ‚Üí listes valides
    df["actesSousTraitance"] = df["actesSousTraitance"].apply(safe_eval)

    # üí£ Explosion : 1 ligne par acte
    df = df.explode("actesSousTraitance").reset_index(drop=True)

    # Conversion en dict au cas o√π certaines valeurs seraient corrompues
    df["actesSousTraitance"] = df["actesSousTraitance"].apply(lambda x: x if isinstance(x, dict) else {})

    # Extraction dans des colonnes √† part
    actes_df = pd.json_normalize(df["actesSousTraitance"].tolist())
    actes_df["uid"] = df["uid"].values

    # Extraction du sous-traitant si pr√©sent
    if any(col.startswith("sousTraitant.") for col in actes_df.columns):
        print("‚úÖ Champ 'sousTraitant' trouv√©, extraction en cours...")
        sous_traitant_df = actes_df[["sousTraitant.id", "sousTraitant.typeIdentifiant"]].copy()
        sous_traitant_df.columns = ["siretSousTraitant", "typeIdentifiantSousTraitant"]
        final_df = pd.concat([actes_df.drop(columns=["sousTraitant.id", "sousTraitant.typeIdentifiant"]), sous_traitant_df], axis=1)
    else:
        print("‚ö†Ô∏è Aucun champ 'sousTraitant' trouv√© dans les actes.")
        print("üîé Voici les colonnes trouv√©es :", actes_df.columns.tolist())
        final_df = actes_df

    print(f"‚úÖ Nombre total d‚Äôactes extraits : {len(final_df)}")
    print(final_df.head(20))

    # Optionnel : export
    # final_df.to_csv("actes_sous_traitance_extraits.csv", index=False)


# fonctions test/debug
def inspect_actes_sous_traitance(file_path=r"C:\Users\elyot\OneDrive\Documents\GitHub\decp-processing\data\decp-2019.json", max_lignes=100_000):
    print(f"üîç Lecture du fichier {file_path}")

    with open(file_path, encoding="utf-8") as f:
        for i, line in enumerate(f):
            if i > max_lignes:
                print("‚ùå Aucun acte trouv√© dans les", max_lignes, "premi√®res lignes.")
                return

            try:
                entry = json.loads(line)
                actes = entry.get("actesSousTraitance")

                if isinstance(actes, str):
                    actes = json.loads(actes)  # si c‚Äôest du texte JSON

                if isinstance(actes, list) and len(actes) > 0:
                    print("‚úÖ Actes de sous-traitance trouv√©s √† la ligne", i)
                    print("Exemple brut :", json.dumps(actes, indent=2, ensure_ascii=False))
                    print("üóùÔ∏è Cl√©s utilis√©es :", list(actes[0].keys()))
                    return
            except Exception as e:
                continue  # on ignore les erreurs JSON

    print("‚ùå Aucun acte de sous-traitance trouv√©.")

def extract_first_valid_actes_subset(input_path, output_path, max_found=3):
    """
    Parcourt un fichier JSON (A), extrait les march√©s dont actesSousTraitance est non vide,
    et √©crit les 3 premiers dans un fichier JSON standard (B).
    """
    import json
    import os

    print(f"üìÇ Lecture de {input_path}")
    try:
        with open(input_path, encoding="utf-8") as f:
            data = json.load(f)
            # üß† Si data est un dict contenant un tableau de march√©s, extraire ce tableau
            if isinstance(data, dict):
                if "marches" in data:
                    data = data["marches"]
                else:
                    print("‚ùå Ce JSON est un dict mais ne contient pas de cl√© 'marches'.")
                    return

            # ‚úÖ Si data est d√©j√† une liste, on la garde telle quelle
            elif not isinstance(data, list):
                print("‚ùå Format inattendu : data doit √™tre une liste ou un dict avec cl√© 'marches'.")
                return


    except Exception as e:
        print(f"‚ùå Erreur lors du chargement du JSON : {e}")
        return

    matches = []
    for i, entry_raw in enumerate(data):
        try:
            entry = json.loads(entry_raw) if isinstance(entry_raw, str) else entry
        except Exception:
            continue

        actes = entry.get("actesSousTraitance", [])
        if isinstance(actes, str):
            try:
                actes = json.loads(actes)
            except Exception:
                actes = []
        if isinstance(actes, list) and len(actes) > 0:
            entry["uid"] = entry.get("uid", entry.get("id", f"market_{i}"))
            matches.append(entry)
            print(f"‚úÖ March√© avec acte trouv√© √† l‚Äôindex {i}")
            if len(matches) >= max_found:
                break

    if not matches:
        print("‚ùå Aucun march√© avec actesSousTraitance non vide trouv√©.")
        return

    os.makedirs(os.path.dirname(output_path), exist_ok=True)

    with open(output_path, "w", encoding="utf-8") as out:
        json.dump(matches, out, ensure_ascii=False, indent=2)
        print(f"‚úÖ {len(matches)} march√©(s) √©crit(s) dans {output_path}")

def debug_print_actes_sous_traitance_non_vides(input_path, max_affichage=20):
    """
    Affiche les march√©s contenant un champ 'actesSousTraitance' non vide,
    et imprime un aper√ßu du premier √©l√©ment de la liste.
    """
    import json

    print(f"üîç Lecture du fichier : {input_path}")
    try:
        with open(input_path, encoding="utf-8") as f:
            data = json.load(f)
    except Exception as e:
        print(f"‚ùå Erreur de lecture JSON : {e}")
        return

    # Si le fichier a une cl√© 'marches'
    if isinstance(data, dict) and "marches" in data:
        data = data["marches"]
    elif not isinstance(data, list):
        print("‚ùå Format inattendu : ni liste, ni dict avec cl√© 'marches'")
        return

    print("üîç Recherche de champs 'actesSousTraitance' NON VIDES...")
    found = 0
    for i, entry in enumerate(data):
        actes = entry.get("actesSousTraitance", None)
        if isinstance(actes, list) and len(actes) > 0:
            found += 1
            print(f"‚úÖ Ligne {i} : {len(actes)} acte(s)")
            print("    ‚û§ Premier acte :", json.dumps(actes[0], ensure_ascii=False, indent=2))
            if found >= max_affichage:
                print("... (limite d'affichage atteinte)")
                break

    if found == 0:
        print("‚ùå Aucun champ 'actesSousTraitance' non vide trouv√©.")
    else:
        print(f"‚úÖ Total trouv√© : {found} march√©(s) avec actesSousTraitance non vide.")
def save_markets_with_actes_sous_traitance(input_path, output_path):
    """
    Extrait tous les march√©s du fichier A (input_path) qui contiennent
    un champ 'actesSousTraitance' non vide, et les sauvegarde tels quels
    dans un fichier JSON standard (output_path).
    """
    import json
    import os

    print(f"üìÇ Lecture du fichier : {input_path}")
    try:
        with open(input_path, encoding="utf-8") as f:
            data = json.load(f)
    except Exception as e:
        print(f"‚ùå Erreur de lecture JSON : {e}")
        return

    if isinstance(data, dict) and "marches" in data:
        data = data["marches"]
    elif not isinstance(data, list):
        print("‚ùå Format inattendu : ni liste, ni dict avec cl√© 'marches'")
        return

    matches = []
    for i, entry in enumerate(data):
        actes = entry.get("actesSousTraitance", None)
        if isinstance(actes, list) and len(actes) > 0:
            matches.append(entry)

    if not matches:
        print("‚ùå Aucun march√© avec actesSousTraitance non vide trouv√©.")
        return

    os.makedirs(os.path.dirname(output_path), exist_ok=True)

    with open(output_path, "w", encoding="utf-8") as out:
        json.dump(matches, out, ensure_ascii=False, indent=2)

    print(f"‚úÖ {len(matches)} march√©(s) export√©(s) dans {output_path}")


# Tu peux l'appeler ici :
if __name__ == "__main__":

    test_extract_actes_sous_traitance_pandas(r"C:\Users\elyot\OneDrive\Documents\GitHub\decp-processing\data\decp-2019.json")
